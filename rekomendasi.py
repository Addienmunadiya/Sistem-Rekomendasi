# -*- coding: utf-8 -*-
"""Rekomendasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z0Gj2bRBm01qN1IJbHyoJZMGedtVz7Cr

# Sistem Rekomendasi Film: Content-Based & Collaborative Filtering

# Import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import warnings
warnings.filterwarnings('ignore')

"""# 2. Load Data"""

movies = pd.read_csv('movies.csv')
ratings = pd.read_csv('ratings.csv')

"""# 3. Data Preprocessing"""

# Gabungkan data
df = ratings.merge(movies, on='movieId')
df.drop('timestamp', axis=1, inplace=True)

# Bersihkan kolom genre
movies['genres'] = movies['genres'].str.replace('|', ' ')

"""# 4. Content-Based Filtering"""

# TF-IDF pada genre
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['genres'])

# Cosine similarity antar film
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)
indices = pd.Series(movies.index, index=movies['title']).drop_duplicates()

def content_recommender(title, cosine_sim=cosine_sim):
    if title not in indices:
        return "Film tidak ditemukan."
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    movie_indices = [i[0] for i in sim_scores]
    return movies['title'].iloc[movie_indices]

# Contoh rekomendasi Content-Based
print("\nContent-Based Recommendation for 'Toy Story (1995)':")
print(content_recommender("Toy Story (1995)"))

"""# 5. Collaborative Filtering"""

# Matriks user-item
user_item_matrix = df.pivot_table(index='userId', columns='title', values='rating').fillna(0)

# Hitung cosine similarity antar user
user_similarity = cosine_similarity(user_item_matrix)
user_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)

def user_based_recommender(user_id, top_n=5):
    if user_id not in user_similarity_df.index:
        return "User ID tidak ditemukan."

    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:11]
    user_watched = set(df[df['userId'] == user_id]['title'])

    recommendations = pd.Series(dtype='float64')
    for other_user, sim in similar_users.items():
        other_ratings = df[df['userId'] == other_user]
        other_ratings = other_ratings[~other_ratings['title'].isin(user_watched)]
        weighted = other_ratings.groupby('title')['rating'].mean() * sim
        recommendations = recommendations.add(weighted, fill_value=0)

    recommendations = recommendations.sort_values(ascending=False).head(top_n)
    return recommendations

# Contoh rekomendasi Collaborative Filtering
print("\nUser-Based Collaborative Filtering for User ID 10:")
print(user_based_recommender(10, top_n=5))

def predict_rating(user_id, item_title):
    if user_id not in user_similarity_df.index:
        return np.nan

    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:11]
    weighted_sum = 0
    sim_sum = 0

    for other_user, similarity in similar_users.items():
        try:
            rating = user_item_matrix.loc[other_user, item_title]
            if rating > 0:
                weighted_sum += rating * similarity
                sim_sum += similarity
        except:
            continue

    if sim_sum == 0:
        return np.nan
    else:
        return weighted_sum / sim_sum

sample_df = df[df['userId'].isin([1, 2, 3, 4, 5])]
sample_df['predicted_rating'] = sample_df.apply(lambda x: predict_rating(x['userId'], x['title']), axis=1)
sample_df.dropna(inplace=True)

rmse = np.sqrt(mean_squared_error(sample_df['rating'], sample_df['predicted_rating']))
print(f"\nRMSE (Collaborative Filtering - User-Based): {rmse:.4f}")

"""## Kesimpulan dan Ringkasan Proyek

### Langkah-langkah Kode

1. **Import Libraries dan Load Dataset**  
   Mengimpor library yang dibutuhkan dan memuat data `movies.csv` dan `ratings.csv`.

2. **Data Preprocessing**  
   Menggabungkan data ratings dan movies, membersihkan kolom genre dengan mengganti pemisah `|` menjadi spasi agar bisa diolah dengan TF-IDF.

3. **Content-Based Filtering**  
   Menggunakan TF-IDF pada data genre film untuk mengekstrak fitur tekstual, lalu menghitung cosine similarity antar film untuk merekomendasikan film yang mirip berdasarkan genre.

4. **User-Based Collaborative Filtering**  
   Membuat matriks user-item dari data rating, kemudian menghitung cosine similarity antar pengguna. Rekomendasi diberikan dengan menimbang rating pengguna yang memiliki pola preferensi mirip.

5. **Evaluasi Model dengan RMSE**  
   Menghitung Root Mean Squared Error (RMSE) antara rating aktual dengan prediksi rating pada subset data sebagai metrik evaluasi akurasi prediksi.

---

### Hasil Rekomendasi

- **Content-Based Filtering** merekomendasikan film-film yang mirip genre dengan contoh input "Toy Story (1995)". Film-film seperti *Toy Story 2*, *Monsters, Inc.*, dan *Antz* muncul sebagai rekomendasi yang relevan, menunjukkan model berhasil menangkap kesamaan genre.

- **User-Based Collaborative Filtering** merekomendasikan film untuk User ID 10 berdasarkan preferensi pengguna lain yang serupa. Rekomendasi seperti *Inception* dan *Toy Story 3* mencerminkan film yang mungkin disukai berdasarkan pola rating pengguna serupa.

---

### Interpretasi RMSE

- Nilai RMSE yang didapat adalah sekitar **1.16**, yang berarti prediksi rating model rata-rata meleset sekitar 1 poin pada skala rating 1-5.
- RMSE ini menunjukkan prediksi model masih dapat ditingkatkan dengan teknik yang lebih canggih, seperti model matrix factorization atau hybrid filtering.
- Namun, hasil ini sudah cukup baik untuk pendekatan sederhana menggunakan cosine similarity dan dapat menjadi baseline yang kuat.

---

### Kesimpulan Akhir

Proyek ini berhasil membangun dua metode sistem rekomendasi film: content-based filtering yang fokus pada kemiripan fitur film, dan collaborative filtering user-based yang menggunakan pola rating pengguna lain. Dengan evaluasi RMSE sebagai metrik performa, proyek ini menyediakan fondasi yang solid untuk pengembangan sistem rekomendasi yang lebih akurat di masa depan.

"""

